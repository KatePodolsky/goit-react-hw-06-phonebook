{"version":3,"sources":["components/ContactListItem/ContactListItem.module.css","components/FilterContacts/FilterContacts.module.css","App.module.css","components/Container/Container.module.css","components/ContactList/ContactList.module.css","components/Container/Container.js","redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/FilterContacts/FilterContacts.js","App.js","redux/contacts/contacts-reducer-helpers.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","Container","children","className","styles","saveContact","createAction","name","number","payload","id","shortid","generate","deleteContact","updateFilter","ContactForm","state","props","nameInputId","numberInputId","handleContactAdd","e","currentTarget","value","setState","handlesubmit","preventDefault","onSubmit","reset","this","form","htmlFor","property","type","pattern","title","required","input","onChange","button","Component","defaultProps","connect","dispatch","contactsActions","ContactListItem","contact","onDeleteContact","item","onClick","getfilteredContacts","allcontacts","filter","normalizedFilter","toLowerCase","includes","contacts","items","contactId","contactList","map","target","filterName","App","componentDidUpdate","prevProps","prevState","localStorage","setItem","JSON","stringify","checkingAnExistingContact","action","some","alert","parsedContacts","parse","getItem","itemsReducer","createReducer","filterReducer","_","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b48da6cc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactListItem_button__3FxKg\",\"item\":\"ContactListItem_item__1R_Kz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterName\":\"FilterContacts_filterName__2yCj8\",\"input\":\"FilterContacts_input__2CEBc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"App_title__2GA-a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__5QPjl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__3UHx4\"};","import React from 'react';\r\nimport styles from  './Container.module.css'\r\n\r\nconst Container = ({ children }) => <div className={styles.Container}>{children}</div>;\r\n\r\nexport default Container","//STEP 2\r\n\r\nimport shortid from 'shortid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst saveContact = createAction('contact/Save', ({ name, number }) => ({\r\n        payload: {\r\n            id: shortid.generate(),\r\n            name: name,\r\n            number: number,\r\n        },\r\n}));\r\n\r\nconst deleteContact = createAction('contact/Delete');\r\n\r\nconst updateFilter = createAction('contact/Filter');\r\n\r\n// eslint-disable-next-line\r\nexport default { saveContact, deleteContact, updateFilter };\r\n\r\n//STEP 1\r\n\r\n// import shortid from 'shortid';\r\n// import actionTypes from './contacts-types'\r\n\r\n// const saveContact = ({ name, number }) => ({\r\n//     type: actionTypes.SAVE_CONTACT,\r\n//     payload: {\r\n//         id: shortid.generate(),\r\n//         name: name,\r\n//         number: number,\r\n//     },\r\n// });\r\n\r\n// const deleteContact = contactId => ({\r\n//     type: actionTypes.DELETE_CONTACT,\r\n//     payload: contactId,\r\n// });\r\n\r\n// const updateFilter = value => ({\r\n//     type: actionTypes.FILTER_CONTACT,\r\n//     payload: value,\r\n// });\r\n\r\n// export default { saveContact, deleteContact, updateFilter };","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport shortid from 'shortid';\r\nimport PropTypes from \"prop-types\";\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\n\r\nimport styles from \"./ContactForm.module.css\"\r\n\r\nclass ContactForm extends Component {\r\n    static defaultProps = {\r\n        name: '',\r\n        number: ''\r\n    };\r\n\r\n    static propTypes = {\r\n        name: PropTypes.string,\r\n        number: PropTypes.string,\r\n    };\r\n\r\n    state = {\r\n        name: this.props.name,\r\n        number: this.props.number,\r\n    }\r\n\r\n    nameInputId = shortid.generate();\r\n    numberInputId = shortid.generate();\r\n\r\n    handleContactAdd = e => {\r\n        const { name, value } = e.currentTarget;\r\n        this.setState({ [name]: value });\r\n    }\r\n\r\n    handlesubmit = e => {\r\n        e.preventDefault();\r\n        this.props.onSubmit(this.state);\r\n        this.reset()\r\n    }\r\n    reset = () => {\r\n        this.setState({ name: \"\", number: \"\" });\r\n    };\r\n\r\n    render() {\r\n        const { name, number } = this.state;\r\n\r\n        return (\r\n            <form onSubmit={this.handlesubmit} className={styles.form}>\r\n                <label htmlFor={this.nameInputId} className={styles.property}>\r\n                    <span>Name</span>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        value={name}\r\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                        required\r\n                        className={styles.input}\r\n                        onChange={this.handleContactAdd}\r\n                        id={this.nameInputId}\r\n                    />\r\n                </label>\r\n                <label htmlFor={this.numberInputId} className={styles.property}>\r\n                    <span>Number</span>\r\n                    <input\r\n                        type=\"tel\"\r\n                        name=\"number\"\r\n                        value={number}\r\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                        required\r\n                        className={styles.input}\r\n                        onChange={this.handleContactAdd}\r\n                        id={this.numberInputId}\r\n                    />\r\n                </label>\r\n                <button type=\"submit\" className={styles.button}>\r\n                    Add contact\r\n                </button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: (name, number) => dispatch(contactsActions.saveContact(name, number)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import React from \"react\";\r\nimport styles from \"../ContactListItem/ContactListItem.module.css\";\r\n\r\nconst ContactListItem = ({contact:{name,number,id},onDeleteContact}) => (\r\n    <li className={styles.item}>\r\n        <span>{name}: {number}</span>\r\n        <button\r\n          type=\"button\"\r\n          className={styles.button}\r\n          onClick={() => onDeleteContact(id)}\r\n        >\r\n          Delete\r\n        </button>\r\n    </li>\r\n)\r\n\r\nexport default ContactListItem","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\nimport PropTypes from 'prop-types';\r\nimport styles from \"./ContactList.module.css\";\r\nimport ContactListItem from \"../ContactListItem/ContactListItem\"\r\n\r\nconst ContactList = ({ contacts,onDeleteContact}) => (\r\n        <ul className={styles.contactList}>\r\n            {contacts.map((contact) => (\r\n                <ContactListItem key={contact.id} contact={contact} onDeleteContact={onDeleteContact} />\r\n        ))}\r\n        </ul>\r\n)\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n    })).isRequired,\r\n}\r\n\r\nconst getfilteredContacts = (allcontacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return allcontacts.filter(contact =>\r\n        contact.name.toLowerCase().includes(normalizedFilter));\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n      contacts: getfilteredContacts(state.contacts.items, state.contacts.filter),\r\n})\r\n\r\n\r\nconst mapDispatchToProps = dispatch => (\r\n    {\r\n        onDeleteContact: (contactId) => dispatch(contactsActions.deleteContact(contactId)),\r\n    }\r\n)\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\nimport styles from \"./FilterContacts.module.css\";\r\n\r\nconst FilterContacts = ({ value, onChange }) => (\r\n    <label className={styles.filterName}>\r\n        Filter by name\r\n        <input type=\"text\" value={value} onChange={onChange} className={styles.input} />\r\n    </label>\r\n)\r\nconst mapStateToProps = state => ({\r\n    value: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: (e) => dispatch(contactsActions.updateFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterContacts)","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Container from \"./components/Container/Container\";\r\nimport ContactForm from \"./components/ContactForm/ContactForm\";\r\nimport ContactList from \"./components/ContactList/ContactList\";\r\nimport FilterContacts from \"./components/FilterContacts/FilterContacts\";\r\n\r\nimport styles from \"./App.module.css\"\r\n\r\nclass App extends Component {\r\n  static propTypes = {\r\n    contacts: PropTypes.array,\r\n    filter: PropTypes.string,\r\n  };\r\n\r\n  componentDidUpdate = (prevProps, prevState) => {\r\n    if (this.props.contacts !== prevProps.contacts) {\r\n      localStorage.setItem('contactArray', JSON.stringify(this.props.contacts))\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <h1 className={styles.title}>Phonebook</h1>\r\n        <ContactForm />\r\n        <h2 className={styles.title}>Contacts</h2>\r\n        <FilterContacts />\r\n        <ContactList />\r\n      </Container >\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    contacts: state.contacts.items,\r\n});\r\n\r\nexport default connect(mapStateToProps)(App);\r\n\r\n\r\n\r\n\r\n\r\n","\r\nconst checkingAnExistingContact = (state, action) => {\r\n    if (state.some(({ name }) => name.toLowerCase() === action.payload.name.toLowerCase())) {\r\n        alert(`${action.payload.name} is already in contacts`)\r\n        return state\r\n    }\r\n\r\n    if (state.some(({ number }) => number === action.payload.number)) {\r\n        alert(`${action.payload.number} is already in contacts under a different name`)\r\n        return state\r\n    }\r\n    return [action.payload, ...state]\r\n};\r\n\r\nexport default checkingAnExistingContact;","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport contactsActions from '../contacts/contacts-actions';\r\nimport checkingAnExistingContact from '../contacts/contacts-reducer-helpers';\r\n\r\nconst parsedContacts = JSON.parse(localStorage.getItem('contactArray')) \r\n\r\nconst itemsReducer = createReducer(parsedContacts || [], {\r\n    [contactsActions.saveContact]: (state, action) => checkingAnExistingContact(state, action),\r\n    [contactsActions.deleteContact]: (state, action) => state.filter(({ id }) => id !== action.payload),\r\n}\r\n)\r\n\r\nconst filterReducer = createReducer('', {\r\n    [contactsActions.updateFilter]:(_, {payload})=> payload\r\n})\r\n\r\nexport default combineReducers({\r\n    items: itemsReducer,\r\n    filter: filterReducer,\r\n});\r\n\r\n\r\n//STEP 1\r\n\r\n// import { combineReducers } from 'redux';\r\n// import actionTypes from './contacts-types'\r\n\r\n// const parsedContacts = JSON.parse(localStorage.getItem('contactArray')) \r\n\r\n// const itemsReducer = (state = parsedContacts|| [], { type, payload }) => {\r\n//     switch (type) {\r\n//         case actionTypes.SAVE_CONTACT:\r\n//             if (state.some(({ name }) => name.toLowerCase() === payload.name.toLowerCase())) {\r\n//                 alert(`${payload.name} is already in contacts`)\r\n//                 return state\r\n//             }\r\n\r\n//             if (state.some(({ number }) => number === payload.number)) {\r\n//                 alert(`${payload.number} is already in contacts under a different name`)\r\n//                 return state\r\n//             }\r\n//             return [payload, ...state]\r\n//            \r\n//         case actionTypes.DELETE_CONTACT:\r\n//             return state.filter(({ id }) => id !== payload);\r\n\r\n//         default:\r\n//             return state;\r\n//     }\r\n// }\r\n\r\n// const filterReducer = (state = '', { type, payload }) => {\r\n//     switch (type) {\r\n//         case actionTypes.FILTER_CONTACT:\r\n//             return payload;\r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\n\r\n\r\n// export default combineReducers({\r\n//     items: itemsReducer,\r\n//     filter: filterReducer,\r\n// });","//STEP 2\r\n\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\n\r\nimport contactsReducer from './contacts/contacts-reducer'\r\n\r\nconst middleware = [...getDefaultMiddleware(), logger];\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: contactsReducer,\r\n    },\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development',\r\n})\r\n\r\nexport default store;\r\n\r\n//STEP 1\r\n\r\n// import { createStore, combineReducers } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// import contactsReducer from './contacts/contacts-reducer';\r\n\r\n\r\n// const rootReducer = combineReducers({\r\n//     contacts: contactsReducer,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// export default store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport store from './redux/store';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport \"./index.module.css\";\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3KZQ1\",\"property\":\"ContactForm_property__3zdgx\",\"input\":\"ContactForm_input__37fAd\",\"button\":\"ContactForm_button__2j25n\"};"],"sourceRoot":""}